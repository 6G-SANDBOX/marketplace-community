jobs:
  - script: >
      pipelineJob('TN_DEPLOY') {
        parameters {
          stringParam('TN_ID', '', 'Trial Network Identifier. MANDATORY')
          stringParam('COMPONENT_TYPE', '', '6G Library Component type. MANDATORY')
          stringParam('CUSTOM_NAME', '', 'Custom name for the component inside the Trian Network. Valid characters are A-Z, a-z, 0-9 and underscore _. MANDATORY except for tn_vxlan and tn_bastion')
          stringParam('DEPLOYMENT_SITE', '', 'Site where the deployment is being made. E.g. uma, athens, fokus, oulu... MANDATORY')
          stringParam('TNLCM_CALLBACK', 'http://tnlcm-ip:5000/tnlcm/callback/', 'URL of the TNLCM to notify the results. MANDATORY')
          stringParam('LIBRARY_URL', 'https://github.com/6G-SANDBOX/6G-Library.git', '6G-Library repository HTTPS URL. Leave it as-is unless you want to test your own fork')
          stringParam('LIBRARY_BRANCH', 'v0.2.0', 'LIBRARY_URL checkout to use. Valid inputs can be refs/heads/<branchName>, refs/tags/<tagName> or <commitId>. Leave it as-is unless you want to test alternative releases/branches/commits.')
          stringParam('SITES_URL', 'https://github.com/6G-SANDBOX/6G-Sandbox-Sites.git', '6G-Library-Sites repository HTTP URL. Leave it as-is unless you want to test your own fork')
          stringParam('SITES_BRANCH', 'refs/heads/main', 'SITES_URL checkout to use. Valid inputs can be refs/heads/<branchName>, refs/tags/<tagName> or <commitId>. Leave it as-is unless you want to test alternative releases/branches/commits.')
          booleanParam('DEBUG', false, 'Enable DEBUG. Files will not be purged after the pipeline execution')
          base64File{
            name('FILE')
            description('YAML file that contains the public variables needed to deploy the component')
          }
        }
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('^${LIBRARY_URL}')
                }
                branch('^${LIBRARY_BRANCH}')
              }
            }
            scriptPath('.global/pac/TN_DEPLOY.groovy')
          }
        }
      }
  - script: >
      pipelineJob('TN_DESTROY') {
        parameters {
          stringParam('TN_ID', '', 'Trial Network Identifier. MANDATORY')
          stringParam('DEPLOYMENT_SITE', '', 'Site where the deployment is being made. E.g. uma, athens, fokus, oulu... MANDATORY')
          stringParam('TNLCM_CALLBACK', 'http://tnlcm-ip:5000/tnlcm/callback/', 'URL of the TNLCM to notify the results. MANDATORY')
          stringParam('LIBRARY_URL', 'https://github.com/6G-SANDBOX/6G-Library.git', '6G-Library repository HTTPS URL. Leave it as-is unless you want to test your own fork')
          stringParam('LIBRARY_BRANCH', 'v0.2.0', 'LIBRARY_URL checkout to use. Valid inputs can be refs/heads/<branchName>, refs/tags/<tagName> or <commitId>. Leave it as-is unless you want to test alternative releases/branches/commits.')
          stringParam('SITES_URL', 'https://github.com/6G-SANDBOX/6G-Sandbox-Sites.git', '6G-Library-Sites repository HTTP URL. Leave it as-is unless you want to test your own fork')
          stringParam('SITES_BRANCH', 'refs/heads/main', 'SITES_URL checkout to use. Valid inputs can be refs/heads/<branchName>, refs/tags/<tagName> or <commitId>. Leave it as-is unless you want to test alternative releases/branches/commits.')
          booleanParam('DEBUG', false, 'Enable DEBUG. Files will not be purged after the pipeline execution')
        }
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('^${LIBRARY_URL}')
                }
                branch('^${LIBRARY_BRANCH}')
              }
            }
            scriptPath('.global/pac/TN_DESTROY.groovy')
          }
        }
      }
