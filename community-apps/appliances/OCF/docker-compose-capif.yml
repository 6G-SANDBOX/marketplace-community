services:
  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
      - "6379:6379"
    # volumes:
    #   - ${SERVICES_FOLDER}/redis-data:/var/lib/redis
    #   - ${SERVICES_FOLDER}/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    

  helper:
    image: "labs.etsi.org:5050/ocf/capif/prod/helper:${OCF_VERSION}"
    expose:
      - "8080"
    container_name: helper
    restart: unless-stopped
    # volumes:
    #   - ${SERVICES_FOLDER}/helper:/usr/src/app
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
      - vault:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=helper
      - VAULT_HOSTNAME=vault
      - VAULT_ACCESS_TOKEN=dev-only-token
      - VAULT_PORT=8200
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - nginx

  access-control-policy:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-access-control-policy-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Access_Control_Policy_API:/usr/src/app
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=access-control-policy
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped
    depends_on:
      - redis
      - nginx

  api-invoker-management:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-api-invoker-management-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_API_Invoker_Management_API:/usr/src/app
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
      - vault:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-invoker-management
      - MONITORING=${MONITORING}
      - VAULT_HOSTNAME=vault
      - VAULT_ACCESS_TOKEN=dev-only-token
      - VAULT_PORT=8200
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped
    depends_on:
    - redis
    - nginx

  api-provider-management:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-api-provider-management-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_API_Provider_Management_API:/usr/src/app
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
      - vault:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-provider-management
      - MONITORING=${MONITORING}
      - VAULT_HOSTNAME=vault
      - VAULT_ACCESS_TOKEN=dev-only-token
      - VAULT_PORT=8200
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - nginx

  logs:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-auditing-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Auditing_API:/usr/src/app
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    restart: unless-stopped
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-auditing
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - mongo

  service-apis:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-discover-service-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Discover_Service_API:/usr/src/app
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=services-apis
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
    - mongo

  capif-events:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-events-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Events_API:/usr/src/app
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-events
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    depends_on:
      - redis
      - mongo

  api-invocation-logs:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-logging-api-invocation-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Logging_API_Invocation_API:/usr/src/app
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-invocation-logs
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - mongo

  published-apis:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-publish-service-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Publish_Service_API:/usr/src/app
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-publish-apis
      - MONITORING=${MONITORING}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - mongo

  capif-routing-info:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-routing-info-api:${OCF_VERSION}
    expose:
      - "8080"

  capif-security:
    image: labs.etsi.org:5050/ocf/capif/prod/ocf-security-api:${OCF_VERSION}
    expose:
      - "8080"
    # volumes:
    #   - ${SERVICES_FOLDER}/TS29222_CAPIF_Security_API:/usr/src/app
    restart: unless-stopped
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - CONTAINER_NAME=api-security
      - MONITORING=${MONITORING}
      - VAULT_HOSTNAME=vault
      - VAULT_ACCESS_TOKEN=dev-only-token
      - VAULT_PORT=8200
      - LOG_LEVEL=${LOG_LEVEL}
    extra_hosts:
      - host.docker.internal:host-gateway
      - fluent-bit:host-gateway
      - otel-collector:host-gateway
      - vault:host-gateway
    depends_on:
      - redis
      - nginx

  mongo:
    image: mongo:6.0.2
    logging:
      driver: 'none'
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  
  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    logging:
      driver: 'none'
    restart: unless-stopped
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo

  nginx:
    image: labs.etsi.org:5050/ocf/capif/prod/nginx:${OCF_VERSION}
    ports:
      - "8080:8080"
      - "443:443"
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
      - VAULT_HOSTNAME=vault
      - VAULT_ACCESS_TOKEN=dev-only-token
      - VAULT_PORT=8200
      - LOG_LEVEL=${LOG_LEVEL}
    hostname: ${CAPIF_HOSTNAME}
    # volumes:
    #   - ${SERVICES_FOLDER}/nginx/certs:/etc/nginx/certs
    extra_hosts:
      - host.docker.internal:host-gateway
      - vault:host-gateway
    restart: unless-stopped
    depends_on:
      - redis
      - service-apis
      - api-invocation-logs
      - published-apis
      - capif-events
      - logs

networks:
  default:
    name: capif-network
    external: true
